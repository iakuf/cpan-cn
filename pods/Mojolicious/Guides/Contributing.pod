
=encoding utf8

=head1 NAME

Mojolicious::Guides::Contributing - Contributing to Mojolicious

=head1 OVERVIEW

There are many ways to contribute to L<Mojolicious>, this guide will show you
a few of them.

=head1 REPORTING BUGS

We use the L<GitHub issue tracker|https://github.com/kraih/mojo/issues>, so
you'll need to create a (free) GitHub account to be able to submit issues,
comments and pull requests.

First of all, make sure you are using the latest version of L<Mojolicious>, it
is quite likely that your bug has already been fixed. If that doesn't help,
take a look at the list of currently open issues, perhaps it has already been
reported by someone else and you can just add a comment confirming it.

If it hasn't been reported yet, try to prepare a test case demonstrating the
bug, you are not expected to fix it yourself, but you'll have to make sure the
developers can replicate your problem. Sending in your whole application
generally does more harm than good, the C<t> directory of this distribution
has many good examples for how to do it right. Writing a test is usually the
hardest part of fixing a bug, so the better your test case the faster it can
be fixed. ;)

And don't forget to add a descriptive title and text when you create a new
issue.

=head2 Reporting security issues

Please report security issues directly to the CPAN email address of the
pumpkin-holder, which is currently C<sri@cpan.org>, and give us a few days to
develop and release a proper fix.

=head2 Feature requests

Please do not open GitHub issues for feature requests, if there's something
you would like to see in a future version of L<Mojolicious>, you have to write
the code yourself.

If you're looking for feedback on your ideas, you're welcome to discuss them
on the L<mailing-list|http://groups.google.com/group/mojolicious> or the
official IRC channel C<#mojo> on C<irc.perl.org>.

=head1 RESOLVING ISSUES

There are many ways in which you can help us resolve existing issues on the
L<GitHub issue tracker|https://github.com/kraih/mojo/issues>.

Can you replicate the problem on your computer? Add a comment saying that
you're seeing the same. Perhaps you can provide additional information that
will make it easier for others to replicate the problem, maybe even contribute
a better test case.

And for all code contributions we very much appreciate additional testing and
code review, just add a comment to show your approval or to point out flaws
that need to be addressed.

=head1 CONTRIBUTING DOCUMENTATION

One of the easiest ways to contribute to L<Mojolicious> is through
documentation improvements. While the L<Mojolicious::Guides> are carefully
curated by the core team, everybody with a (free) GitHub account can make
changes and add new information to the
L<Mojolicious wiki|http://github.com/kraih/mojo/wiki>. Pull requests with
additions or changes to the documentation included in the L<Mojolicious>
distribution follow the same rules as code contributions.

=head1 CONTRIBUTING CODE

All code contributions should be sent as
L<GitHub pull requests|https://help.github.com/articles/using-pull-requests>.

An expressive title and detailed description are invaluable during the review
process, which usually ends when members of the community have voiced their
opinions and the core team voted for or against a change. All code changes
should emulate the style of the surrounding code, include tests that fail
without them, and update relevant documentation.

While the L<Mojolicious> distribution covers a wide range of features, we are
rather conservative when it comes to adding new ones. So if your contribution
is not a bug fix, you can drastically increase its chances of getting accepted
by discussing it in advance on the
L<mailing-list|http://groups.google.com/group/mojolicious> or the official IRC
channel C<#mojo> on C<irc.perl.org>.

The following mission statement and rules are the foundation of all L<Mojo>
and L<Mojolicious> development. Please make sure that your contribution aligns
well with them before sending a pull request.

=head2 使命声明 

L<Mojo> 是一个 Perl 的 real-time 的 Web 框架的运行时环境. 它为写简单的 Web 应用和高级的 Web 框架 L<Mojolicious> 来提供全部的基础工具和 helper.

所有的组件必须是在其它项目中可重用的, 并且在 Unix 体系中只是松耦合.

特别是对于新的 Perl 用户要尽可能容易安装 L<Mojolicious> 和容易开始. 编写 Web 应用程序可以是最有趣的方式来学习一门语言的方法之一!

For developers of other web frameworks, it should be possible to reuse all the infrastructure and just consider the higher levels of the L<Mojolicious> distribution an example application.

=head2 Rules

=over 2

Web 开发应该是方便和乐趣, 这正是我们努力的方向.

The web is a moving target, to stay relevant we have to stay in motion too.

Keep it simple, no magic unless absolutely necessary.

The installation process should be as fast and painless as possible. (Less
than a minute on most common hardware is a good rule of thumb)

The addition and modification of features is decided by majority vote or the
pumpkin-holder.

Any core developer may nominate a new one, who must then be accepted by a 2/3
majority vote.

The pumpkin-holder has veto rights and may select their successor.

It's not a feature without a test and documentation.

A feature is only needed when the majority of the user base benefits from it.

Features may only be changed in a major release or after being deprecated for
at least 3 months.

Refactoring and deprecations should be avoided if no important feature depends
on it.

New features can be marked as experimental to be excluded from deprecation
policies.

A major release is signaled by a new major version number and a unique code
name based on a Unicode character.

Only add dependencies if absolutely necessary and make them optional if
possible.

Domain specific languages should be avoided in favor of Perl-ish solutions.

No inline POD.

Documentation belongs to the guides, module POD is just an API reference.

The main focus of the included documentation should be on examples, no walls
of text. (An example for every one or two sentences is a good rule of thumb)

Everything should be ordered alphabetically if possible, or at least be
consistent if not.

The master source code repository should always be kept in a stable state, use
feature branches for actual development.

Code has to be run through L<Perl::Tidy> with the included
L<.perltidyrc|https://github.com/kraih/mojo/blob/master/.perltidyrc>, and
everything should look like it was written by a single person.

Functions and methods should be as short as possible, no spaghetti code.

Comments should be correctly capitalized, and funny if possible, punctuation
is optional if it doesn't increase readability.

No names outside of C<Mojolicious.pm>.

No Elitism.

Peace!

=back

=head1 MORE

You can continue with L<Mojolicious::Guides> now or take a look at the
L<Mojolicious wiki|http://github.com/kraih/mojo/wiki>, which contains a lot
more documentation and examples by many different authors.

=head1 SUPPORT

If you have any questions the documentation might not yet answer, don't
hesitate to ask on the
L<mailing-list|http://groups.google.com/group/mojolicious> or the official IRC
channel C<#mojo> on C<irc.perl.org>.

=cut
