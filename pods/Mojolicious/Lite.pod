package Mojolicious::Lite;
use Mojo::Base 'Mojolicious';

# "Bender: Bite my shiny metal ass!"
use File::Basename 'dirname';
use File::Spec::Functions 'catdir';
use Mojo::UserAgent;

sub import {
  my $class = shift;

  # Executable
  $ENV{MOJO_EXE} ||= (caller)[1];

  # Home
  local $ENV{MOJO_HOME} = catdir(split '/', dirname($ENV{MOJO_EXE}))
    unless $ENV{MOJO_HOME};

  # Initialize app
  no strict 'refs';
  my $caller = caller;
  push @{"${caller}::ISA"}, 'Mojo';
  my $app = $class->new;

  # Initialize routes
  my $routes = $app->routes->namespace('');

  # Default static and template class
  $app->static->classes->[0] = $app->renderer->classes->[0] = $caller;

  # Export
  no warnings 'redefine';
  my $root = $routes;
  for my $name (qw(any get options patch post put websocket)) {
    *{"${caller}::$name"} = sub { $routes->$name(@_) };
  }
  *{"${caller}::new"} = *{"${caller}::app"} = sub {$app};
  *{"${caller}::del"} = sub { $routes->delete(@_) };
  *{"${caller}::group"} = sub (&) {
    my $old = $root;
    $_[0]->($root = $routes);
    ($routes, $root) = ($root, $old);
  };
  *{"${caller}::helper"} = sub { $app->helper(@_) };
  *{"${caller}::hook"}   = sub { $app->hook(@_) };
  *{"${caller}::plugin"} = sub { $app->plugin(@_) };
  *{"${caller}::under"}  = sub { $routes = $root->under(@_) };

  # Make sure there's a default application for testing
  Mojo::UserAgent->app($app) unless Mojo::UserAgent->app;

  # Lite apps are strict!
  Mojo::Base->import(-strict);
}

1;

=pod

=encoding utf-8


=head1 文档

Mojolicious::Lite - Real-time micro web framework

=head1 概述

  # Automatically enables "strict", "warnings" and Perl 5.10 features
  use Mojolicious::Lite;

  # Route with placeholder
  get '/:foo' => sub {
    my $self = shift;
    my $foo  = $self->param('foo');
    $self->render(text => "Hello from $foo.");
  };

  # Start the Mojolicious command system
  app->start;

=head1 描述

L<Mojolicious::Lite> 是由 L<Mojolicious> 做的一个实时 web 框架。

=head1 教程

一个简单的例子来给你介绍，在 L<Mojolicious::Lite> 中的奇妙之处。 你会在这里学到的大多数也适用于全功能的 L<Mojolicious> 应用。

=head2 Hello World

下面是一个简单的 Hello World 的应用程序.因为在 Perl 5.10 中会默认启用  L<strict>, L<warnings> 几个功能。并导入  L<Mojolicious::Lite> 的功能，让你的脚本本成一个全功能的 web 应用.

  #!/usr/bin/env perl
  use Mojolicious::Lite;

  get '/' => sub {
    my $self = shift;
    $self->render(text => 'Hello World!');
  };

  app->start;

=head2 Generator

这有一个辅助命令来生成这个例子中的应用程序

  $ mojo generate lite_app

=head2 Commands

这些标准的 L<Mojolicious::Commands> 中会提供一些常用的命令行功能.注意 CGI 和 PSGI 的环境可以自动检查出来.可以不提供参数.

  $ ./myapp.pl daemon
  Server available at http://127.0.0.1:3000.

  $ ./myapp.pl daemon -l http://*:8080
  Server available at http://127.0.0.1:8080.

  $ ./myapp.pl cgi
  ...CGI output...

  $ ./myapp.pl
  ...List of available commands (or automatically detected environment)...

=head2 Start

你可以在  app->start 的调用中加入参数，来替换掉标准的从 C<@ARGV> 中接收参数.

  app->start('cgi');

=head2 Reloading

如果你想你的应用在修改后能自动的 reload 的话，建议你使用 morbo 的开发用的 web 服务器，这样你就不用每次修改后重起.

  $ morbo myapp.pl
  Server available at http://127.0.0.1:3000.

=head2 Routes

Routes 只是请求过来的基本的路径。可以在路径中包含不同的占位符。C<$self> 是 L<Mojolicious::Controller> 对象其中包含着 HTTP request 和 HTTP response。

  use Mojolicious::Lite;

  # /foo
  get '/foo' => sub {
    my $self = shift;
    $self->render(text => 'Hello World!');
  };

  app->start;

=head2 GET/POST parameters

全部的 C<GET> 和 C<POST> 的参数只需要通过 L<Mojolicious::Controller/"param"> 来访问.

  use Mojolicious::Lite;

  # /foo?user=sri
  get '/foo' => sub {
    my $self = shift;
    my $user = $self->param('user');
    $self->render(text => "Hello $user.");
  };

  app->start;

=head2 Stash and templates

这个 L<Mojolicious::Controller/"stash"> 是用来传一些数据给模板技术使用,在这我们使用的是 C<DATA>  这个部分的模板.

  use Mojolicious::Lite;

  # /bar
  get '/bar' => sub {
    my $self = shift;
    $self->stash(one => 23);
    $self->render('baz', two => 24);
  };

  app->start;
  __DATA__

  @@ baz.html.ep
  The magic numbers are <%= $one %> and <%= $two %>.

更多有关模板的信息可以看看 L<Mojolicious::Guides::Rendering/"Embedded Perl">.

=head2 HTTP

L<Mojolicious::Controller/"req"> 和 L<Mojolicious::Controller/"res"> 提供了全功能的 HTTP 的支持.

  use Mojolicious::Lite;

  # /agent
  get '/agent' => sub {
    my $self = shift;
    $self->res->headers->header('X-Bender' => 'Bite my shiny metal ass!');
    $self->render(text => $self->req->headers->user_agent);
  };

  app->start;

=head2 Route names

全部的 Routes 会关联到相关的名字，会自动的取得相关的名字的模板。另外  L<Mojolicious::Controller/"url_for"> 和  L<Mojolicious::Plugin::TagHelpers/"link_to"> 也能帮到你。

  use Mojolicious::Lite;

  # /
  get '/' => sub {
    my $self = shift;
    $self->render;
  } => 'index';

  # /hello
  get '/hello';

  app->start;
  __DATA__

  @@ index.html.ep
  <%= link_to Hello  => 'hello' %>.
  <%= link_to Reload => 'index' %>.

  @@ hello.html.ep
  Hello World!

=head2 Layouts

模板是可以分层的，你只需要选择 helper 中的  L<Mojolicious::Plugin::DefaultHelpers/"layout">。给当前结果放到模板中通过  L<Mojolicious::Plugin::DefaultHelpers/"content">.

  use Mojolicious::Lite;

  # /with_layout
  get '/with_layout' => sub {
    my $self = shift;
    $self->render('with_layout');
  };

  app->start;
  __DATA__

  @@ with_layout.html.ep
  % title 'Green';
  % layout 'green';
  Hello World!

  @@ layouts/green.html.ep
  <!DOCTYPE html>
  <html>
    <head><title><%= title %></title></head>
    <body><%= content %></body>
  </html>

=head2 Blocks

模板可以使用标准的 Perl 的功能，只需要使用 C<begin>  和 C<end> 的关键字分隔.

  use Mojolicious::Lite;

  # /with_block
  get '/with_block' => 'block';

  app->start;
  __DATA__

  @@ block.html.ep
  % my $link = begin
    % my ($url, $name) = @_;
    Try <%= link_to $url => begin %><%= $name %><% end %>.
  % end
  <!DOCTYPE html>
  <html>
    <head><title>Sebastians frameworks</title></head>
    <body>
      %= $link->('http://mojolicio.us', 'Mojolicious')
      %= $link->('http://catalystframework.org', 'Catalyst')
    </body>
  </html>

=head2 Captured content

在 helper 中可以使用  L<Mojolicious::Plugin::DefaultHelpers/"content_for"> 来抓到包在一个块中的内容.

  use Mojolicious::Lite;

  # /captured
  get '/captured' => sub {
    my $self = shift;
    $self->render('captured');
  };

  app->start;
  __DATA__

  @@ captured.html.ep
  % layout 'blue', title => 'Green';
  % content_for header => begin
    <meta http-equiv="Pragma" content="no-cache">
  % end
  Hello World!
  % content_for header => begin
    <meta http-equiv="Expires" content="-1">
  % end

  @@ layouts/blue.html.ep
  <!DOCTYPE html>
  <html>
    <head>
      <title><%= title %></title>
      %= content_for 'header'
    </head>
    <body><%= content %></body>
  </html>

=head2 Helpers

你可以扩展内置的 L<Mojolicious> 的这个 helpers, 全部内置的所有的原生的可以在 L<Mojolicious::Plugin::DefaultHelpers> 和 L<Mojolicious::Plugin::TagHelpers> 中来查看.

  use Mojolicious::Lite;

  # "whois" helper
  helper whois => sub {
    my $self  = shift;
    my $agent = $self->req->headers->user_agent || 'Anonymous';
    my $ip    = $self->tx->remote_address;
    return "$agent ($ip)";
  };

  # /secret
  get '/secret' => sub {
    my $self = shift;
    my $user = $self->whois;
    $self->app->log->debug("Request from $user.");
  };

  app->start;
  __DATA__

  @@ secret.html.ep
  We know who you are <%= whois %>.

=head2 占位符

路径选择的占位符可以让你取得一些请求中的路径。结果会可以通过 L<Mojolicious::Controller/"stash"> 和 L<Mojolicious::Controller/"param"> 来访问.

  use Mojolicious::Lite;

  # /foo/test
  # /foo/test123
  get '/foo/:bar' => sub {
    my $self = shift;
    my $bar  = $self->stash('bar');
    $self->render(text => "Our :bar placeholder matched $bar");
  };

  # /testsomething/foo
  # /test123something/foo
  get '/(:bar)something/foo' => sub {
    my $self = shift;
    my $bar  = $self->param('bar');
    $self->render(text => "Our :bar placeholder matched $bar");
  };

  app->start;

=head2 松懈占位符 

松懈占位可以让你匹配直接到 C</> 。

  use Mojolicious::Lite;

  # /test/hello
  # /test123/hello
  # /test.123/hello
  get '/#you/hello' => 'groovy';

  app->start;
  __DATA__

  @@ groovy.html.ep
  Your name is <%= $you %>.

=head2 通配位符

配位符可以匹配到任何东西，包括 C</> 和 C<.>.

  use Mojolicious::Lite;

  # /hello/test
  # /hello/test123
  # /hello/test.123/test/123
  get '/hello/*you' => 'groovy';

  app->start;
  __DATA__

  @@ groovy.html.ep
  Your name is <%= $you %>.

=head2 HTTP methods

路径选择的方法可以指定 HTTP 的方法

  use Mojolicious::Lite;

  # GET /hello
  get '/hello' => sub {
    my $self = shift;
    $self->render(text => 'Hello World!');
  };

  # PUT /hello
  put '/hello' => sub {
    my $self = shift;
    my $size = length $self->req->body;
    $self->render(text => "You uploaded $size bytes to /hello.");
  };

  # GET|POST|PATCH /bye
  any [qw(GET POST PATCH)] => '/bye' => sub {
    my $self = shift;
    $self->render(text => 'Bye World!');
  };

  # * /whatever
  any '/whatever' => sub {
    my $self   = shift;
    my $method = $self->req->method;
    $self->render(text => "You called /whatever with $method.");
  };

  app->start;

=head2 选的占位符 

可选的占位符.

  use Mojolicious::Lite;

  # /hello
  # /hello/Sara
  get '/hello/:name' => {name => 'Sebastian'} => sub {
    my $self = shift;
    $self->render('groovy', format => 'txt');
  };

  app->start;
  __DATA__

  @@ groovy.txt.ep
  My name is <%= $name %>.

=head2 Restrictive placeholders

The easiest way to make placeholders more restrictive are alternatives, you just make a list of possible values.

  use Mojolicious::Lite;

  # /test
  # /123
  any '/:foo' => [foo => [qw(test 123)]] => sub {
    my $self = shift;
    my $foo  = $self->param('foo');
    $self->render(text => "Our :foo placeholder matched $foo");
  };

  app->start;

All placeholders get compiled to a regular expression internally, this process
can also be easily customized.

  use Mojolicious::Lite;

  # /1
  # /123
  any '/:bar' => [bar => qr/\d+/] => sub {
    my $self = shift;
    my $bar  = $self->param('bar');
    $self->render(text => "Our :bar placeholder matched $bar");
  };

  app->start;

Just make sure not to use C<^> and C<$> or capturing groups C<(...)>, because
placeholders become part of a larger regular expression internally, C<(?:...)>
is fine though.

=head2 Under

认证并共享代码在多个路径之间很容易实现，只需要桥接生成的路由并使用 C<under> 的声明。判断是认证还是路径显示只需要看看返回是否为 true 就知道了.

  use Mojolicious::Lite;

  # Authenticate based on name parameter
  under sub {
    my $self = shift;

    # Authenticated
    my $name = $self->param('name') || '';
    return 1 if $name eq 'Bender';

    # Not authenticated
    $self->render('denied');
    return undef;
  };

  # / (with authentication)
  get '/' => 'index';

  app->start;
  __DATA__;

  @@ denied.html.ep
  You are not Bender, permission denied.

  @@ index.html.ep
  Hi Bender.

要实现前缀的多个路径选择，也是一个使用的 C<under> 的好理由。

  use Mojolicious::Lite;

  # /foo
  under '/foo';

  # /foo/bar
  get '/bar' => {text => 'foo bar'};

  # /foo/baz
  get '/baz' => {text => 'foo baz'};

  # /
  under '/' => {message => 'whatever'};

  # /bar
  get '/bar' => {inline => '<%= $message %> works'};

  app->start;

你也可以使用 C<group> 来组织相关的 routes ，这可以对多个路径进行 C<under>  的声明.

  use Mojolicious::Lite;

  # Global logic shared by all routes
  under sub {
    my $self = shift;
    return 1 if $self->req->headers->header('X-Bender');
    $self->render(text => "You're not Bender.");
    return undef;
  };

  # Admin section
  group {

    # Local logic shared only by routes in this group
    under '/admin' => sub {
      my $self = shift;
      return 1 if $self->req->heaers->header('X-Awesome');
      $self->render(text => "You're not awesome enough.");
      return undef;
    };

    # GET /admin/dashboard
    get '/dashboard' => {text => 'Nothing to see here yet.'};
  };

  # GET /welcome
  get '/welcome' => {text => 'Hi Bender.'};

  app->start;

=head2 Formats

这其实是指的后缀，这个会自动根据后缀来选择.

  use Mojolicious::Lite;

  # /detection.html
  # /detection.txt
  get '/detection' => sub {
    my $self = shift;
    $self->render('detected');
  };


  app->start;
  __DATA__

  @@ detected.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Detected</title></head>
    <body>HTML was detected.</body>
  </html>

  @@ detected.txt.ep
  TXT was detected.

限制性的的占位符也可以使用。

  use Mojolicious::Lite;

  # /hello.json
  # /hello.txt
  get '/hello' => [format => [qw(json txt)]] => sub {
    my $self = shift;
    return $self->render_json({hello => 'world'})
      if $self->stash('format') eq 'json';
    $self->render_text('hello world');
  };

  app->start;

你也可以禁用格式检查.

  use Mojolicious::Lite;

  # /hello
  get '/hello' => [format => 0] => {text => 'No format detection.'};

  # Disable detection and allow the following routes selective re-enabling
  under [format => 0];

  # /foo
  get '/foo' => {text => 'No format detection again.'};

  # /bar.txt
  get '/bar' => [format => 'txt'] => {text => ' Just one format.'};

  app->start;

=head2 内容协商 

不同的表示方法和需要真正 C<RESTful> 的内容来协商，你可以看看 L<Mojolicious::Controller/"respond_to">.

  use Mojolicious::Lite;

  # /hello (Accept: application/json)
  # /hello (Accept: application/xml)
  # /hello.json
  # /hello.xml
  # /hello?format=json
  # /hello?format=xml
  get '/hello' => sub {
    my $self = shift;
    $self->respond_to(
      json => {json => {hello => 'world'}},
      xml  => {text => '<hello>world</hello>'},
      any  => {data => '', status => 204}
    );
  };

  app->start;

有关 MIME type 的相关后缀的对应关系看 L<Mojolicious/"types">.

  app->types->type(rdf => 'application/rdf+xml');

=head2 Conditions

条件可以是象 C<agent>  和 C<host> 之前从  L<Mojolicious::Plugin::HeaderCondition> 来的东西。可以提供强大的路由限制.

  use Mojolicious::Lite;

  # /foo (Firefox)
  get '/foo' => (agent => qr/Firefox/) => sub {
    my $self = shift;
    $self->render(text => 'Congratulations, you are using a cool browser.');
  };

  # /foo (Internet Explorer)
  get '/foo' => (agent => qr/Internet Explorer/) => sub {
    my $self = shift;
    $self->render(text => 'Dude, you really need to upgrade to Firefox.');
  };

  # http://mojolicio.us/bar
  get '/bar' => (host => 'mojolicio.us') => sub {
    my $self = shift;
    $self->render(text => 'Hello Mojolicious.');
  };

  app->start;

=head2 Sessions

签名 cookie 基于你的 session ，这个原生可以使用。直接通过 helper  L<Mojolicious::Plugin::DefaultHelpers/"session">.

  use Mojolicious::Lite;

  get '/counter' => sub {
    my $self = shift;
    $self->session->{counter}++;
  };

  app->start;
  __DATA__

  @@ counter.html.ep
  Counter: <%= session 'counter' %>

只需要意识到，所有的会话数据需要通过  L<Mojo::JSON> 序列化。

=head2 Secret

需要注意的是，你应该使用一个自定义的  L<Mojolicious/"secret"> 来签署 Cookie 才会真正的安全。

  app->secret('My secret passphrase here');

=head2 File uploads

所有上传的文件只要是 C<multipart/form-data> 的请求会自动转为 L<Mojo::Upload> 对象处理。你不用担心内存的使用，因为超过 C<250KB> 的所有文件将被自动到一个临时文件。

  use Mojolicious::Lite;

  # Upload form in DATA section
  get '/' => 'form';

  # Multipart upload handler
  post '/upload' => sub {
    my $self = shift;

    # Check file size
    return $self->render(text => 'File is too big.', status => 200)
      if $self->req->is_limit_exceeded;

    # Process uploaded file
    return $self->redirect_to('form')
      unless my $example = $self->param('example');
    my $size = $example->size;
    my $name = $example->filename;
    $self->render(text => "Thanks for uploading $size byte file $name.");
  };

  app->start;
  __DATA__

  @@ form.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Upload</title></head>
    <body>
      %= form_for upload => (enctype => 'multipart/form-data') => begin
        %= file_field 'example'
        %= submit_button 'Upload'
      % end
    </body>
  </html>

为了保护您避免过大的文件, 这也有一个默认极限的值 C<5MB>。你可以使用 C<MOJO_MAX_MESSAGE_SIZE> 的环境变量来修改这个.

  # Increase limit to 1GB
  $ENV{MOJO_MAX_MESSAGE_SIZE} = 1073741824;

=head2 User agent

L<Mojolicious::Controller/"ua">  是一个全功能的 HTTP 和 WebSocket 的 user agent，当你和 L<Mojo::JSON> L<Mojo::DOM> 组合使用时非常的强大.

  use Mojolicious::Lite;

  get '/test' => sub {
    my $self = shift;
    $self->render(data => $self->ua->get('http://mojolicio.us')->res->body);
  };

  app->start;

=head2 WebSockets

WebSocket的应用程序从未如此简单。

  use Mojolicious::Lite;

  websocket '/echo' => sub {
    my $self = shift;
    $self->on(message => sub {
      my ($self, $msg) = @_;
      $self->send("echo: $msg");
    });
  };

  app->start;

The event L<Mojo::Transaction::WebSocket/"message">, which you can subscribe
to with L<Mojolicious::Controller/"on">, will be emitted for every new
WebSocket message that is received.

=head2 External templates

External templates will be searched by the renderer in a C<templates>
directory.

  use Mojolicious::Lite;

  # /external
  any '/external' => sub {
    my $self = shift;

    # templates/foo/bar.html.ep
    $self->render('foo/bar');
  };

  app->start;

=head2 Static files

Static files will be automatically served from the C<DATA> section (even
Base64 encoded) or a C<public> directory if it exists.

  @@ something.js
  alert('hello!');

  @@ test.txt (base64)
  dGVzdCAxMjMKbGFsYWxh

  $ mkdir public
  $ mv something.js public/something.js

=head2 Testing

Testing your application is as easy as creating a C<t> directory and filling
it with normal Perl unit tests.

  use Test::More;
  use Test::Mojo;

  use FindBin;
  require "$FindBin::Bin/../myapp.pl";

  my $t = Test::Mojo->new;
  $t->get_ok('/')->status_is(200)->content_like(qr/Funky/);

  done_testing();

Run all unit tests with the C<test> command.

  $ ./myapp.pl test

To make your tests more noisy and show you all log messages you can also
change the application log level directly in your test files.

  $t->app->log->level('debug');

=head2 Mode

To disable debug messages later in a production setup, you can change the
L<Mojolicious> operating mode with command line options or the C<MOJO_MODE>
environment variable, the default will usually be C<development>.

  $ ./myapp.pl daemon -m production

This also affects many other aspects of the framework, such as mode specific
C<exception> and C<not_found> templates.

=head2 Logging

L<Mojo::Log> messages will be automatically written to C<STDERR> or a
C<log/$mode.log> file if a C<log> directory exists.

  $ mkdir log

For more control the L<Mojolicious> object can be accessed directly.

  use Mojolicious::Lite;

  app->log->level('error');
  app->routes->get('/foo/:bar' => sub {
    my $self = shift;
    $self->app->log->debug('Got a request for "Hello Mojo!".');
    $self->render(text => 'Hello Mojo!');
  });

  app->start;

=head2 More

You can continue with L<Mojolicious::Guides> now, and don't forget to have
fun!

=head1 FUNCTIONS

L<Mojolicious::Lite> implements the following functions.

=head2 C<any>

  my $route = any '/:foo' => sub {...};
  my $route = any [qw(GET POST)] => '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"any">, matching any of the
listed HTTP request methods or all. See also the tutorial above for more
argument variations.

=head2 C<app>

  my $app = app;

The L<Mojolicious::Lite> application.

=head2 C<del>

  my $route = del '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"delete">, matching only
C<DELETE> requests. See also the tutorial above for more argument variations.

=head2 C<get>

  my $route = get '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"get">, matching only C<GET>
requests. See also the tutorial above for more argument variations.

=head2 C<group>

  group {...};

Start a new route group.

=head2 C<helper>

  helper foo => sub {...};

增加一个新的 L<Mojolicious/"helper">.

=head2 C<hook>

  hook after_dispatch => sub {...};

使用 L<Mojolicious/"hook"> 共享你的功能.

=head2 C<options>

  my $route = options '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"options">, matching only
C<OPTIONS> requests. See also the tutorial above for more argument
variations.

=head2 C<patch>

  my $route = patch '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"patch">, matching only
C<PATCH> requests. See also the tutorial above for more argument variations.

=head2 C<plugin>

  plugin SomePlugin => {foo => 23};

Load a plugin with L<Mojolicious/"plugin">.

=head2 C<post>

  my $route = post '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"post">, matching only
C<POST> requests. See also the tutorial above for more argument variations.

=head2 C<put>

  my $route = put '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"put">, matching only C<PUT>
requests. See also the tutorial above for more argument variations.

=head2 C<under>

  my $route = under sub {...};
  my $route = under '/:foo';

Generate bridge route with L<Mojolicious::Routes::Route/"under">, to which all
following routes are automatically appended. See also the tutorial above for
more argument variations.

=head2 C<websocket>

  my $route = websocket '/:foo' => sub {...};

Generate route with L<Mojolicious::Routes::Route/"websocket">, matching only
C<WebSocket> handshakes. See also the tutorial above for more argument
variations.

=head1 ATTRIBUTES

L<Mojolicious::Lite> 继承全部的属性从 L<Mojolicious>.

=head1 METHODS

L<Mojolicious::Lite> 继承全部的方法从 L<Mojolicious>.

=head1 SEE ALSO

L<Mojolicious>, L<Mojolicious::Guides>, L<http://mojolicio.us>.

=cut

