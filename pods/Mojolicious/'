=pod

=encoding utf-8

=head1 文档

Mojolicious::Guides::Cookbook - Cookbook

=head1 概述

许多有趣的烹饪 L<Mojolicious> 的食谱.

=head1 部署

我们可以让 L<Mojolicious> 和 L<Mojolicious::Lite> 的应用运行在不同的平台上，注意时实 web 特性是基于 L<Mojo::IOLoop> 的事件循环,因此，需要一个内置的 Web 服务器才能够使用它们来充分发挥其潜力。

=head2 内置的 Web 服务器 

L<Mojolicious> 内部包含了一个非常方便的非阻塞的  I/O HTTP 和 WebSocket 的 L<Mojo::Server::Daemon> 的服务器。这个常用于在开发中，也可以用它来创建更加先进的 web 服务器。
但是对于中小型的应用来讲，这个也足够快了.

  $ ./script/myapp daemon
  Server available at http://127.0.0.1:3000.

可以使用 -h 的选项看到更加多的配置参数.

  $ ./script/myapp daemon -h
  ...List of available options...

另一个巨大的好处是，它默认支持 TLS 和 WebSocket。

  $ ./script/myapp daemon -l https://*:3000
  Server available at https://127.0.0.1:3000.

这个内置了一个测试用的证书.

=head2 Morbo

如果你之前读过 L<Mojolicious::Lite> 这个指南，我想你已经知道 L<Mojo::Server::Morbo> 这个东西了。

  Mojo::Server::Morbo
  +- Mojo::Server::Daemon

它是基于 L<Mojo::Server::Daemon> 的 web 服务器 fork 出来并在你的代码变化时支持 restarter 功能，所以也只是用于开发当中.

  $ morbo script/myapp
  Server available at http://127.0.0.1:3000.

=head2 Hypnotoad

对于更加大的应用， L<Mojolicious> 包含 UNIX 优化过的 preforking 的 Web 服务器 L<Mojo::Server::Hypnotoad>. 它可以让利用多 CPU 和 copy-on-write.

  Mojo::Server::Hypnotoad
  |- Mojo::Server::Daemon [1]
  |- Mojo::Server::Daemon [2]
  |- Mojo::Server::Daemon [3]
  +- Mojo::Server::Daemon [4]

这个也可以基于 L<Mojo::Server::Daemon> 的 Web 来启动，但是对于生产环境进行了优化。

  $ hypnotoad script/myapp
  Server available at http://127.0.0.1:8080.

在您的应用程序，你可以调整许多设置, 有关设置的完整列表  L<Mojo::Server::Hypnotoad/"SETTINGS">.

  use Mojolicious::Lite;

  app->config(hypnotoad => {listen => ['http://*:3000']});

  get '/' => {text => 'Hello Wor...ALL GLORY TO THE HYPNOTOAD!'};

  app->start;

你也可以给这些有关 C<hypnotoad> 的设置写到你的 L<Mojolicious::Plugin::Config> 和 L<Mojolicious::Plugin::JSONConfig> 的配置文件中.

  # myapp.conf
  {hypnotoad => {listen => ['http://*:80'], workers => 10}};

但其最大的优点之一可以支持象 Nginx 一样的零停机的软件升级。这意味着你可以不用停止服务的前提下升级 L<Mojolicious>, Perl 或者是系统库。在你运行的时候你不用停止服务，也不用担心失去连接，只需要在次运行上面的命令.

  $ hypnotoad script/myapp
  Starting hot deployment for Hypnotoad server 31841.

如果你的 Hypnotoad 使用的环境是在反向代理之后，你可以让 L<Mojolicious> 自动的取得 C<X-Forwarded-For> 和 C<X-Forwarded-HTTPS> 的头。

  # myapp.conf
  {hypnotoad => {proxy => 1}};

你的应用程序是预装管理进程在启动过程中，你可以使用 L<Mojo::IOLoop> 的 timers 来运行代码在一个新的 forked 出来的 worker 进程中。

  use Mojolicious::Lite;

  Mojo::IOLoop->timer(0 => sub {
    app->log->info("Worker $$ star...ALL GLORY TO THE HYPNOTOAD!");
  });

  get '/' => {text => 'Hello Wor...ALL GLORY TO THE HYPNOTOAD!'};

  app->start;

=head2 Nginx

这可能是最流行的一个设置了，让你的应用的内置 Web 服务器工作在 Nginx 之后.

  upstream myapp {
    server 127.0.0.1:8080;
  }
  server {
    listen 80;
    server_name localhost;
    location / {
      proxy_read_timeout 300;
      proxy_pass http://myapp;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-HTTPS 0;
    }
  }

=head2 Apache/mod_proxy

另一个好的反向代理是 C<mod_proxy>，看起来和上面 Nginx 的配置非常相似。

  <VirtualHost *:80>
    ServerName localhost
    <Proxy *>
      Order deny,allow
      Allow from all
    </Proxy>
    ProxyRequests Off
    ProxyPreserveHost On
    ProxyPass / http://localhost:8080/ keepalive=On
    ProxyPassReverse / http://localhost:8080/
    RequestHeader set X-Forwarded-HTTPS "0"
  </VirtualHost>

=head2 Apache/CGI

当然你的 L<Mojolicious> 应用也支持 C<CGI> 的应用。这会自动检查你的环境。

  ScriptAlias / /home/sri/myapp/script/myapp/

=head2 PSGI/Plack

L<PSGI> 是你的 Perl 的 Web 框架和 Web 服务器之间的接口。其中的 L<Plack> 是一个 Perl 的模块和包含  L<PSGI> 中间件的一个工具,
它可以帮助你适配你的 Web 服务器. L<PSGI> 和 L<Plack> 灵感来自于 Python 的 WSGI 和 Ruby 的结构。 

  $ plackup ./script/myapp
  HTTP::Server::PSGI: Accepting connections at http://0:5000/

L<Plack> 为你提供了许多服务器和协议适配器，例如  C<FCGI>, C<SCGI> 和 C<mod_perl>. 你需要在你的应用的当前目录下来运行应用程序，不然可能有些库会找不到。

  $ plackup ./script/myapp -s FCGI -l /tmp/myapp.sock

因为是通过 C<plackup> 来加载你的应用， L<Mojolicious> 这时并不能发现你的应用的主目录，当然你可以设置你的  C<MOJO_HOME> 的环境变量。当然你也可以使用 C<app-E<gt>start> 在你的应用的启动脚本中来声明。以解决这个问题。

  $ MOJO_HOME=/home/sri/myapp plackup ./script/myapp
  HTTP::Server::PSGI: Accepting connections at http://0:5000/

=head2 Plack 的中间件

给你的程序使用脚本包起来成 C<myapp.fcgi> 这种来进行分离你的应用的逻辑是个很好的主意。

  #!/usr/bin/env plackup -s FCGI
  use Plack::Builder;

  builder {
    enable 'Deflater';
    require 'myapp.pl';
  };

你甚至可以用在您的应用程序中使用中间件。

  use Mojolicious::Lite;
  use Plack::Builder;

  get '/welcome' => sub {
    my $self = shift;
    $self->render(text => 'Hello Mojo!');
  };

  builder {
    enable 'Deflater';
    app->start;
  };

=head2 重写

有时您可能需要将应用程序部署在一个黑盒的环境下，你不能只是更改服务器配置或只是在一个后端反向代理服务器上，只有传送过来的 C<X-*> 的头, 你可以使用 C<before_dispatch> 来重写传入的请求.

  # Change scheme if "X-Forwarded-Protocol" header is set to "https"
  app->hook(before_dispatch => sub {
    my $self = shift;
    $self->req->url->base->scheme('https')
      if $self->req->headers->header('X-Forwarded-Protocol') eq 'https';
  });

由于有时使用反向代理不会传递相关请求的路径前缀，您的应用程序部署在这种环境下，重写请求的传送进来的基本路径也是很常见的。

  # Move first part from path to base path in production mode
  app->hook(before_dispatch => sub {
    my $self = shift;
    push @{$self->req->url->base->path->parts},
      shift @{$self->req->url->path->parts};
  }) if app->mode eq 'production';

=head2 应用嵌入

有时, 你可能想重用 L<Mojolicious> 的配置文件，数据库连接和 helpers 之类的脚本。这有个小型的服务器可以嵌入到你的应用让你可以实现这些。

  use Mojo::Server;

  # Load application with mock server
  my $server = Mojo::Server->new;
  my $app = $server->load_app('./myapp.pl');

  # Access fully initialized application
  say for @{$app->static->paths};
  say $app->config->{secret_identity};
  say $app->dumper({just => 'a helper test'});

=head2 Web 服务器嵌入 

你也可以使用原生的 Web 服务器嵌入到  L<Mojolicious>  的应用中。当然，不要忘记使用事件循环.

  use Mojolicious::Lite;
  use Mojo::IOLoop;
  use Mojo::Server::Daemon;

  # Normal action
  get '/' => {text => 'Hello World!'};

  # Connect application with web server and start accepting connections
  my $daemon
    = Mojo::Server::Daemon->new(app => app, listen => ['http://*:8080']);
  $daemon->start;

  # Call "one_tick" repeatedly from the alien environment
  Mojo::IOLoop->one_tick while 1;

=head1 实时 WEB

这个 real-time web 是一个集大成者，包含有 Comet (long-polling), EventSource 和 WebSocket, 这可以让内容尽快的 pushed 到消费者使用 long-lived 的连接,因为这是使用的并不是传统的 pull 模型。这个内置的 web 服务器使用 non-blocking I/O 和 基于 L<Mojo::IOLoop> 的事件循环，它提供了超级强大的功能，可以让你的 Web 应用同时服务数以千计的客户.

=head2 后端的 Web 服务 

由于 L<Mojo::UserAgent> 也是基于 L<Mojo::IOLoop> 的件循环，它并不是阻塞原生的内置 Web 服务器，使用了非阻塞就算是高延迟的 Web 后端也可以工作的很后.

  use Mojolicious::Lite;

  # Search Twitter for "perl"
  get '/' => sub {
    my $self = shift;
    $self->ua->get('http://search.twitter.com/search.json?q=perl' => sub {
      my ($ua, $tx) = @_;
      $self->render('twitter', results => $tx->res->json->{results});
    });
  };

  app->start;
  __DATA__

  @@ twitter.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Twitter results for "perl"</title></head>
    <body>
      % for my $result (@$results) {
        <p><%= $result->{text} %></p>
      % }
    </body>
  </html>

在有多个事件，如并行请求时，可以很容易地与的 L<Mojo::IOLoop> 做延迟同步.

  use Mojolicious::Lite;
  use Mojo::IOLoop;
  use Mojo::URL;

  # Search Twitter for "perl" and "python"
  get '/' => sub {
    my $self = shift;

    # Prepare response in two steps
    Mojo::IOLoop->delay(

      # Parallel requests
      sub {
        my $delay = shift;
        my $url   = Mojo::URL->new('http://search.twitter.com/search.json');
        $self->ua->get($url->clone->query({q => 'perl'})   => $delay->begin);
        $self->ua->get($url->clone->query({q => 'python'}) => $delay->begin);
      },

      # Delayed rendering
      sub {
        my ($delay, $perl, $python) = @_;
        $self->render(json => {
          perl   => $perl->res->json('/results/0/text'),
          python => $python->res->json('/results/0/text')
        });
      }
    );
  };

  app->start;

=head2 Timers

在 L<Mojo::IOLoop> 中另一个主要特征是定时器，这可以例如用于延迟渲染一个响应，和不同于 C<sleep>, 不会阻塞任何其他并行正在被处理的请求。

  use Mojolicious::Lite;
  use Mojo::IOLoop;

  # Wait 3 seconds before rendering a response
  get '/' => sub {
    my $self = shift;
    Mojo::IOLoop->timer(3 => sub {
      $self->render(text => 'Delayed by 3 seconds!');
    });
  };

  app->start;

周期性定时器更加强大，象 AnyEvent 一样，这个需要手动停止或一直执行.

  use Mojolicious::Lite;
  use Mojo::IOLoop;

  # Count to 5 in 1 second steps
  get '/' => sub {
    my $self = shift;

    # Start recurring timer
    my $i = 1;
    my $id = Mojo::IOLoop->recurring(1 => sub {
      $self->write_chunk($i);
      $self->finish if $i++ == 5;
    });

    # Stop recurring timer
    $self->on(finish => sub { Mojo::IOLoop->remove($id) });
  };

  app->start;

定时器不依赖于特定的连接请求，它甚至可以在启动时创建的。

  use Mojolicious::Lite;
  use Mojo::IOLoop;

  # Count seconds since startup
  my $i = 0;
  Mojo::IOLoop->recurring(1 => sub { $i++ });

  # Show counter
  get '/' => sub {
    my $self = shift;
    $self->render(text => "About $i seconds running!");
  };

  app->start;

Since timers and other low level event watchers are also independent from applications, errors can't get logged automatically, you can change that by subscribing to the event L<Mojo::Reactor/"error">.

  # Forward error messages to the application log
  Mojo::IOLoop->singleton->reactor->on(error => sub {
    my ($reactor, $err) = @_;
    app->log->error($err);
  });

Just remember that all events are processed cooperatively, so your callbacks
shouldn't block for too long.

=head2 WebSocket web service

The WebSocket protocol offers full bi-directional low-latency communication
channels between clients and servers. Receiving messages is as easy as
subscribing to the event L<Mojo::Transaction::WebSocket/"message"> with the
method L<Mojolicious::Controller/"on">.

  use Mojolicious::Lite;
  use Mojo::IOLoop;

  # Template with browser-side code
  get '/' => 'index';

  # WebSocket echo service
  websocket '/echo' => sub {
    my $self = shift;

    # Connected
    $self->app->log->debug('WebSocket connected.');

    # Increase inactivity timeout for connection a bit
    Mojo::IOLoop->stream($self->tx->connection)->timeout(300);

    # Incoming message
    $self->on(message => sub {
      my ($self, $msg) = @_;
      $self->send("echo: $msg");
    });

    # Disconnected
    $self->on(finish => sub {
      my $self = shift;
      $self->app->log->debug('WebSocket disconnected.');
    });
  };

  app->start;
  __DATA__

  @@ index.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Echo</title></head>
    <body>
      <script>
        var ws = new WebSocket('<%= url_for('echo')->to_abs %>');

        // Incoming messages
        ws.onmessage = function(event) {
          document.body.innerHTML += event.data + '<br/>';
        };

        // Outgoing messages
        window.setInterval(function() {
          ws.send('Hello Mojo!');
        }, 1000);
      </script>
    </body>
  </html>

The event L<Mojo::Transaction::WebSocket/"finish"> will be emitted right after
the WebSocket connection has been closed.

=head2 Testing WebSocket web services

While the message flow on WebSocket connections can be rather dynamic, it
more often than not is quite predictable, which allows this rather pleasant
L<Test::Mojo> API to be used.

  use Test::More;
  use Test::Mojo;

  # Include application
  use FindBin;
  require "$FindBin::Bin/../echo.pl";

  # Test echo web service
  my $t = Test::Mojo->new;
  $t->websocket_ok('/echo')
    ->send_ok('Hello Mojo!')
    ->message_is('echo: Hello Mojo!')
    ->finish_ok;

  done_testing();

=head2 EventSource web service

EventSource is a special form of long-polling where you can directly send DOM
events from servers to clients. It is uni-directional, that means you will
have to use Ajax requests for sending data from clients to servers, the
advantage however is low infrastructure requirements, since it reuses the HTTP
protocol for transport.

  use Mojolicious::Lite;
  use Mojo::IOLoop;

  # Template with browser-side code
  get '/' => 'index';

  # EventSource for log messages
  get '/events' => sub {
    my $self = shift;

    # Increase inactivity timeout for connection a bit
    Mojo::IOLoop->stream($self->tx->connection)->timeout(300);

    # Change content type
    $self->res->headers->content_type('text/event-stream');

    # Subscribe to "message" event and forward "log" events to browser
    my $cb = $self->app->log->on(message => sub {
      my ($log, $level, @lines) = @_;
      $self->write("event:log\ndata: [$level] @lines\n\n");
    });

    # Unsubscribe from "message" event again once we are done
    $self->on(finish => sub {
      my $self = shift;
      $self->app->log->unsubscribe(message => $cb);
    });
  };

  app->start;
  __DATA__

  @@ index.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>LiveLog</title></head>
    <body>
      <script>
        var events = new EventSource('<%= url_for 'events' %>');

        // Subscribe to "log" event
        events.addEventListener('log', function(event) {
          document.body.innerHTML += event.data + '<br/>';
        }, false);
      </script>
    </body>
  </html>

The event L<Mojo::Log/"message"> will be emitted for every new log message and
the event L<Mojo::Transaction/"finish"> right after the transaction has been
finished.

=head2 Streaming multipart uploads

L<Mojolicious> contains a very sophisticated event system based on
L<Mojo::EventEmitter>, with ready-to-use events on almost all layers, and
which can be combined to solve some of hardest problems in web development.

  use Mojolicious::Lite;
  use Scalar::Util 'weaken';

  # Emit "request" event early for requests that get upgraded to multipart
  hook after_build_tx => sub {
    my $tx = shift;
    weaken $tx;
    $tx->req->content->on(upgrade => sub { $tx->emit('request') });
  };

  # Upload form in DATA section
  get '/' => 'index';

  # Streaming multipart upload (invoked twice, due to early "request" event)
  post '/upload' => sub {
    my $self = shift;

    # First invocation, subscribe to "part" event to find the right one
    return $self->req->content->on(part => sub {
      my ($multi, $single) = @_;

      # Subscribe to "body" event of part to make sure we have all headers
      $single->on(body => sub {
        my $single = shift;

        # Make sure we have the right part and replace "read" event
        return unless $single->headers->content_disposition =~ /example/;
        $single->unsubscribe('read')->on(read => sub {
          my ($single, $chunk) = @_;

          # Log size of every chunk we receive
          $self->app->log->debug(length($chunk) . ' bytes uploaded.');
        });
      });
    }) unless $self->req->is_finished;

    # Second invocation, render response
    $self->render(text => 'Upload was successful.');
  };

  app->start;
  __DATA__

  @@ index.html.ep
  <!DOCTYPE html>
  <html>
    <head><title>Streaming multipart upload</title></head>
    <body>
      %= form_for upload => (enctype => 'multipart/form-data') => begin
        %= file_field 'example'
        %= submit_button 'Upload'
      % end
    </body>
  </html>

=head2 Event loops

在内部的 L<Mojo::IOLoop> 的事件环可以使用多种不同的后端， 例如，安装了 L<EV>  就会自动的使用。也可以使用其它的也能正常工作.
Internally the L<Mojo::IOLoop> event loop can use multiple reactor backends, L<EV> for example will be automatically used if installed. Which in turn allows other event loops like L<IO::Async> to just work.

  use Mojolicious::Lite;
  use EV;
  use IO::Async::Loop::EV;
  use IO::Async::Timer::Absolute;

  my $loop = IO::Async::Loop::EV->new;

  # Wait 3 seconds before rendering a response
  get '/' => sub {
    my $self = shift;
    $loop->add(IO::Async::Timer::Absolute->new(
      time      => time + 3,
      on_expire => sub { $self->render(text => 'Delayed by 3 seconds!') }
    ));
  };

  app->start;

象使用 L<AnyEvent>.

  use Mojolicious::Lite;
  use EV;
  use AnyEvent;

  # Wait 3 seconds before rendering a response
  get '/' => sub {
    my $self = shift;
    my $w;
    $w = AE::timer 3, 0, sub {
      $self->render(text => 'Delayed by 3 seconds!');
      undef $w;
    };
  };

  app->start;

后端到底是使用的什么事件循环并不重要.

  use Mojo::UserAgent;
  use EV;
  use AnyEvent;

  # Search Twitter for "perl"
  my $cv = AE::cv;
  my $ua = Mojo::UserAgent->new;
  $ua->get('http://search.twitter.com/search.json?q=perl' => sub {
    my ($ua, $tx) = @_;
    $cv->send($tx->res->json('/results/0/text'));
  });
  say $cv->recv;

你也可以为你的内置 Web 服务器的应用来使用 L<AnyEvent>。

  use Mojolicious::Lite;
  use Mojo::Server::Daemon;
  use EV;
  use AnyEvent;

  # Normal action
  get '/' => {text => 'Hello World!'};

  # Connect application with web server and start accepting connections
  my $daemon
    = Mojo::Server::Daemon->new(app => app, listen => ['http://*:8080']);
  $daemon->start;

  # Let AnyEvent take control
  AE::cv->recv;

=head1 USER AGENT

When we say L<Mojolicious> is a web framework we actually mean it.

=head2 Web scraping

Scraping information from web sites has never been this much fun before. The
built-in HTML/XML parser L<Mojo::DOM> supports all CSS selectors that make
sense for a standalone parser.

  use Mojo::UserAgent;

  # Fetch web site
  my $ua = Mojo::UserAgent->new;
  my $tx = $ua->get('mojolicio.us/perldoc');

  # Extract title
  say 'Title: ', $tx->res->dom->at('head > title')->text;

  # Extract headings
  $tx->res->dom('h1, h2, h3')->each(sub {
    say 'Heading: ', shift->all_text;
  });

  # Recurse through children manually to extract more than just text
  sub text_and_images {
    my $elements = shift;
    for my $e ($elements->each) {

      # Text before this element
      print $e->text_before(0);

      # Also include alternate text for images
      print $e->{alt} if $e->type eq 'img';

      # Text from children
      my $children = $e->children;
      $children->size ? text_and_images($children) : print $e->text(0);
    }

    # Text after last element
    print $elements->[-1]->text_after(0);
  }
  text_and_images($tx->res->dom->children);

Especially for unit testing your L<Mojolicious> applications this can be a
very powerful tool.

=head2 JSON web services

Most web services these days are based on the JSON data-interchange format.
That's why L<Mojolicious> comes with the possibly fastest pure-Perl
implementation L<Mojo::JSON> built right in.

  use Mojo::UserAgent;
  use Mojo::Util 'encode';

  # Fresh user agent
  my $ua = Mojo::UserAgent->new;

  # Fetch the latest news about Mojolicious from Twitter
  my $search = 'http://search.twitter.com/search.json?q=Mojolicious';
  for $tweet (@{$ua->get($search)->res->json->{results}}) {

    # Tweet text
    my $text = $tweet->{text};

    # Twitter user
    my $user = $tweet->{from_user};

    # Show both
    say encode('UTF-8', "$text --$user");
  }

=head2 Basic authentication

You can just add username and password to the URL.

  use Mojo::UserAgent;

  my $ua = Mojo::UserAgent->new;
  say $ua->get('https://sri:secret@mojolicio.us/hideout')->res->body;

=head2 Decorating followup requests

L<Mojo::UserAgent> can automatically follow redirects, the event
L<Mojo::UserAgent/"start"> allows you direct access to each transaction right
after they have been initialized and before a connection gets associated with
them.

  use Mojo::UserAgent;

  # User agent following up to 10 redirects
  my $ua = Mojo::UserAgent->new(max_redirects => 10);

  # Add a witty header to every request
  $ua->on(start => sub {
    my ($ua, $tx) = @_;
    $tx->req->headers->header('X-Bender' => 'Bite my shiny metal ass!');
    say 'Request: ', $tx->req->url->clone->to_abs;
  });

  # Request that will most likely get redirected
  say 'Title: ', $ua->get('google.com')->res->dom->at('head > title')->text;

This even works for proxy C<CONNECT> requests.

=head2 Streaming response

Receiving a streaming response can be really tricky in most HTTP clients, but
L<Mojo::UserAgent> makes it actually easy.

  use Mojo::UserAgent;

  # Build a normal transaction
  my $ua = Mojo::UserAgent->new;
  my $tx = $ua->build_tx(GET => 'http://mojolicio.us');

  # Replace "read" events to disable default content parser
  $tx->res->content->unsubscribe('read')->on(read => sub {
    my ($content, $chunk) = @_;
    say "Streaming: $chunk";
  });

  # Process transaction
  $ua->start($tx);

The event L<Mojo::Content/"read"> will be emitted for every chunk of data that
is received, even C<chunked> encoding will be handled transparently if
necessary.

=head2 Streaming request

Sending a streaming request is almost just as easy.

  use Mojo::UserAgent;

  # Build a normal transaction
  my $ua = Mojo::UserAgent->new;
  my $tx = $ua->build_tx(GET => 'http://mojolicio.us');

  # Prepare content
  my $content = 'Hello world!';
  $tx->req->headers->content_length(length $content);

  # Start writing directly with a drain callback
  my $drain;
  $drain = sub {
    my $req   = shift;
    my $chunk = substr $content, 0, 1, '';
    $drain    = undef unless length $content;
    $req->write($chunk, $drain);
  };
  $tx->req->$drain;

  # Process transaction
  $ua->start($tx);

The drain callback passed to L<Mojo::Message/"write"> will be invoked whenever
the entire previous chunk has actually been written.

=head2 Large file downloads

When downloading large files with L<Mojo::UserAgent> you don't have to worry
about memory usage at all, because it will automatically stream everything
above C<250KB> into a temporary file.

  use Mojo::UserAgent;

  # Lets fetch the latest Mojolicious tarball
  my $ua = Mojo::UserAgent->new(max_redirects => 5);
  my $tx = $ua->get('latest.mojolicio.us');
  $tx->res->content->asset->move_to('mojo.tar.gz');

To protect you from excessively large files there is also a limit of C<5MB> by
default, which you can tweak with the C<MOJO_MAX_MESSAGE_SIZE> environment
variable.

  # Increase limit to 1GB
  $ENV{MOJO_MAX_MESSAGE_SIZE} = 1073741824;

=head2 Large file upload

Uploading a large file is even easier.

  use Mojo::UserAgent;

  # Upload file via POST and "multipart/form-data"
  my $ua = Mojo::UserAgent->new;
  $ua->post_form('mojolicio.us/upload',
    {image => {file => '/home/sri/hello.png'}});

And once again you don't have to worry about memory usage, all data will be
streamed directly from the file.

  use Mojo::UserAgent;

  # Upload file via PUT
  my $ua     = Mojo::UserAgent->new;
  my $asset  = Mojo::Asset::File->new(path => '/home/sri/hello.png');
  my $tx     = $ua->build_tx(PUT => 'mojolicio.us/upload');
  $tx->req->content->asset($asset);
  $ua->start($tx);

=head2 Non-blocking

L<Mojo::UserAgent> has been designed from the ground up to be non-blocking,
the whole blocking API is just a simple convenience wrapper. Especially for
high latency tasks like web crawling this can be extremely useful, because you
can keep many parallel connections active at the same time.

  use Mojo::UserAgent;
  use Mojo::IOLoop;

  # Parallel non-blocking requests
  my $ua = Mojo::UserAgent->new;
  $ua->get('http://mojolicio.us' => sub {
    my ($ua, $tx) = @_;
    ...
  });
  $ua->get('http://mojolicio.us/perldoc' => sub {
    my ($ua, $tx) = @_;
    ...
  });

  # Start event loop if necessary
  Mojo::IOLoop->start unless Mojo::IOLoop->is_running;

You can take full control of the L<Mojo::IOLoop> event loop.

=head2 Parallel blocking requests

You can emulate blocking behavior by using a L<Mojo::IOLoop> delay to
synchronize multiple non-blocking requests. Just be aware that the resulting
transactions will be in random order.

  use Mojo::UserAgent;
  use Mojo::IOLoop;

  # Synchronize non-blocking requests and capture result
  my $ua    = Mojo::UserAgent->new;
  my $delay = Mojo::IOLoop->delay;
  $ua->get('http://mojolicio.us'         => $delay->begin);
  $ua->get('http://mojolicio.us/perldoc' => $delay->begin);
  my ($tx, $tx2) = $delay->wait;

The event L<Mojo::IOLoop::Delay/"finish"> can be used for code that needs to
be able to work standalone as well as inside L<Mojolicious> applications.

  use Mojo::UserAgent;
  use Mojo::IOLoop;

  # Synchronize non-blocking requests portably
  my $ua    = Mojo::UserAgent->new;
  my $delay = Mojo::IOLoop->delay(sub {
    my ($delay, $tx, $tx2) = @_;
    ...
  });
  $ua->get('http://mojolicio.us'         => $delay->begin);
  $ua->get('http://mojolicio.us/perldoc' => $delay->begin);
  $delay->wait unless Mojo::IOLoop->is_running;

=head2 Command line

Don't you hate checking huge HTML files from the command line? Thanks to the
C<mojo get> command that is about to change. You can just pick the parts that
actually matter with the CSS selectors from L<Mojo::DOM> and JSON Pointers
from L<Mojo::JSON::Pointer>.

  $ mojo get http://mojolicio.us 'head > title'

How about a list of all id attributes?

  $ mojo get http://mojolicio.us '*' attr id

Or the text content of all heading tags?

  $ mojo get http://mojolicio.us 'h1, h2, h3' text

Maybe just the text of the third heading?

  $ mojo get http://mojolicio.us 'h1, h2, h3' 3 text

You can also extract all text from nested child elements.

  $ mojo get http://mojolicio.us '#mojobar' all

The request can be customized as well.

  $ mojo get -M POST -c 'Hello!' http://mojolicio.us
  $ mojo get -H 'X-Bender: Bite my shiny metal ass!' http://google.com

You can follow redirects and view the headers for all messages.

  $ mojo get -r -v http://reddit.com 'head > title'

Extract just the information you really need from JSON data structures.

  $ mojo get http://search.twitter.com/search.json /error

This can be an invaluable tool for testing your applications.

  $ ./myapp.pl get /welcome 'head > title'

=head2 Oneliners

For quick hacks and especially testing, L<ojo> oneliners are also a great
choice.

  $ perl -Mojo -E 'say g("mojolicio.us")->dom->html->head->title->text'

=head1 HACKS

Fun hacks you might not use very often but that might come in handy some day.

=head2 Adding commands to Mojolicious

By now you've propably used many of the built-in commands described in
L<Mojolicious::Commands>, but did you know that you can just add new ones and
that they will be picked up automatically by the command line interface?

  package Mojolicious::Command::spy;
  use Mojo::Base 'Mojolicious::Command';

  has description => "Spy on application.\n";
  has usage       => "usage: $0 spy [TARGET]\n";

  sub run {
    my ($self, $target) = @_;

    # Leak secret passphrase
    if ($target eq 'secret') {
      my $secret = $self->app->secret;
      say qq{The secret of this application is "$secret".};
    }
  }

  1;

There are many more useful methods and attributes in L<Mojolicious::Command>
that you can use or overload.

  $ mojo spy secret
  The secret of this application is "Mojolicious::Lite".

  $ ./myapp.pl spy secret
  The secret of this application is "secr3t".

And to make your commands application specific, just put them in a different
namespace.

  # Application
  package MyApp;
  use Mojo::Base 'Mojolicious';

  sub startup {
    my $self = shift;

    # Add another namespace to load commands from
    push @{$self->commands->namespaces}, 'MyApp::Command';
  }

  1;

=head2 Running code against your application

Ever thought about running a quick oneliner against your L<Mojolicious>
application to test something? Thanks to the C<eval> command you can do just
that, the application object itself can be accessed via C<app>.

  $ mojo generate lite_app
  $ ./myapp.pl eval 'say for @{app->static->paths}'

The C<verbose> option will automatically print the return value to C<STDOUT>.

  $ ./myapp.pl eval -v 'app->static->paths->[0]'

=head2 Making your application installable

Ever thought about releasing your L<Mojolicious> application to CPAN? It's
actually much easier than you might think.

  $ mojo generate app
  $ cd my_mojolicious_app
  $ mv public lib/MyMojoliciousApp/
  $ mv templates lib/MyMojoliciousApp/

The trick is to move the C<public> and C<templates> directories so they can
get automatically installed with the modules.

  # Application
  package MyMojoliciousApp;
  use Mojo::Base 'Mojolicious';

  use File::Basename 'dirname';
  use File::Spec::Functions 'catdir';

  # Every CPAN module needs a version
  our $VERSION = '1.0';

  sub startup {
    my $self = shift;

    # Switch to installable home directory
    $self->home->parse(catdir(dirname(__FILE__), 'MyMojoliciousApp'));

    # Switch to installable "public" directory
    $self->static->paths->[0] = $self->home->rel_dir('public');

    # Switch to installable "templates" directory
    $self->renderer->paths->[0] = $self->home->rel_dir('templates');

    $self->plugin('PODRenderer');

    my $r = $self->routes;
    $r->get('/welcome')->to('example#welcome');
  }

  1;

That's really everything, now you can package your application like any other
CPAN module.

  $ ./script/my_mojolicious_app generate makefile
  $ perl Makefile.PL
  $ make test
  $ make manifest
  $ make dist

And if you have a C<PAUSE> account (which can be requested at
L<http://pause.perl.org>) even upload it.

  $ mojo cpanify -u USER -p PASS MyMojoliciousApp-0.01.tar.gz

=head2 Hello World

If every byte matters this is the smallest C<Hello World> application you can
write with L<Mojolicious::Lite>.

  use Mojolicious::Lite;
  any {text => 'Hello World!'};
  app->start;

It works because all routes without a pattern default to C</> and automatic
rendering kicks in even if no actual code gets executed by the router. The
renderer just picks up the C<text> value from the stash and generates a
response.

=head2 Hello World oneliners

The C<Hello World> example above can get even a little bit shorter in an
L<ojo> oneliner.

  $ perl -Mojo -E 'a({text => "Hello World!"})->start' daemon

And you can use all the commands from L<Mojolicious::Commands>.

  $ perl -Mojo -E 'a({text => "Hello World!"})->start' get -v /

=head1 MORE

You can continue with L<Mojolicious::Guides> now or take a look at the
L<Mojolicious wiki|http://github.com/kraih/mojo/wiki>, which contains a lot
more documentation and examples by many different authors.

=cut
