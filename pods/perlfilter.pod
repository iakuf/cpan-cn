=head1 NAME

perlfilter - Source Filters

=head1 DESCRIPTION

This article is about a little-known feature of Perl called
I<source filters>. Source filters alter the program text of a module
before Perl sees it, much as a C preprocessor alters the source text of
a C program before the compiler sees it. This article tells you more
about what source filters are, how they work, and how to write your
own.

The original purpose of source filters was to let you encrypt your
program source to prevent casual piracy. This isn't all they can do, as
you'll soon learn. But first, the basics.

=head1 CONCEPTS

Perl 解释器在执行一个 Perl 脚本之前， 它必须首先从文件读取到内存中解析和编译。如果该脚本本身包括其他脚本 C<use> 的或 C<require> 声明的，那么这些脚本会从各自的文件被读取。

可以认为每个逻辑之间的连接是 Perl 解析器和单独的文件代码流. 一个源的流是由创建 Perl 解析器打开文件创建，它在内存中还是继续包含存在的源代码，面当它解析完整个时才被摧毁。如果解析器中有一个
C<require> 和 C<use> 的代码声明产生一个新的源码流，这个文件会产生一个新的不同的流.

下面的图表代表从一个 Perl 的程序中生成的单一的源码流。这是 Perl 如何正常工作。

    file -------> parser

有两个重要要记住：

=over 5

=item 1.

在任何时候可以有任意多条的源码流存在，但同时只能一个是激活的。

=item 2.

每一个源码流只有一个文件相关联。

=back

源过滤器是一种特殊的 Perl 模块，它可以在源码流到达解析器之前拦截和修改它。源过滤器改变了我们上面的图示：

    file ----> filter ----> parser

如果你认为没有太大的意义，你可以考虑这样的比喻，一个命令管道。假设你有一个 shell 脚本存在一个压缩的 I<trial.gz> 中。一个简单的管道命令运行这个这个临时创建出来的程序文件.

    gunzip -c trial.gz | sh

在这种情况下，从管道中的数据流可被表示为如下：

    trial.gz ----> gunzip ----> sh

使用源过滤器，你可以为你的 Perl 解析器中的程序中的文本压缩和解压。

     compressed           gunzip
    Perl program ---> source filter ---> parser

=head1 USING FILTERS

我们怎么样在我们的 Perl 程序中使用源码过滤器？ 我们要知道这个源码过滤器只是一个模块。所以我们只要使用 use 的声明来调用这个就行了.

假如你在执行程序之前你想通过你的 Perl 源码通过 C 预处理器。嗯，你只需要使用 Filter::cpp 的模块在你的应用中就行了。

下面是一个例子程序，C<cpp_test> 利用此过滤器.  行号是用于指示特定的行数来教学。

    1: use Filter::cpp;
    2: #define TRUE 1
    3: $a = TRUE;
    4: print "a = $a\n";

当你执行这个脚本时， Perl 会为这个文件创建一个源码流。在解析任何文件中的行之前，这个码流会这样:

    cpp_test ---------> parser

第一行， C<use Filter::cpp>, 会包含并安装 C<cpp> 的过滤器模块。全部的源代码过滤器都能工作。我们 use 声明在编译和执行在编译时期，在文件被读取之前，然后它附加的 cpp 过滤到幕后源码流。现在的数据流看起来像这样：

    cpp_test ----> cpp filter ----> parser

然后解析器从源码唷中读第二行和接下来的行，C<cpp> 的源码过滤器会在这些行送进处理之前来处理它们。在这个地方  C<cpp> 过滤器只是简单的给每行传给真正的 C<cpp> 过滤器。C 预处理器的输出由过滤器然后插入到源码流中。


                  .-> cpp --.
                  |         |
                  |         |
                  |       <-'
   cpp_test ----> cpp filter ----> parser

然后，解析器看到下面的代码：

    use Filter::cpp;
    $a = 1;
    print "a = $a\n";

让我们考虑过滤后代码包括使用另一个模块时会发生什么：

    1: use Filter::cpp;
    2: #define TRUE 1
    3: use Fred;
    4: $a = TRUE;
    5: print "a = $a\n";

这个 C<cpp> 的过滤器并不合适 Fred 的文本模块，只使用 (C<cpp_test>) 中的文本文件。通过 use 声明在第三行会传给  cpp 的过滤器，这时会包含进 C<Fred> 的模块。这时源码流解析到第三行之后第四行之前。 

    cpp_test ---> cpp filter ---> parser (INACTIVE)

    Fred.pm ----> parser

就象你见到的，这时会为 C<Fred.pm> 创建一个新的读的源码流。当前 C<cpp_test> 流保持有效真到 C<Fred.pm> 被解析完，只是无效但存在着。一量分析器读完 Fred.pm 之后就会被销毁. 在 C<cpp_test>  上的流就会变得在次活跃然后解析读取第四行之后 C<cpp_test> 上的内容。

在单个文件中，你可以使用一个以上的源码过滤器。如果你喜欢，也可以使用相同的过滤器在多个文件中.

例如，如果你有一个uuencode编码和压缩的源文件，它是可能的层叠 uudecode 的过滤器和一个这样的解压过滤器：


    use Filter::uudecode; use Filter::uncompress;
    M'XL(".H<US4''V9I;F%L')Q;>7/;1I;_>_I3=&E=%:F*I"T?22Q/
    M6]9*<IQCO*XFT"0[PL%%'Y+IG?WN^ZYN-$'J.[.JE$,20/?K=_[>
    ...

只要处理到第一行，整个流程看起来就会象这样.

    file ---> uudecode ---> uncompress ---> parser
               filter         filter

数据流经过滤器以相同的顺序出现在源文件中.这个 uudecode 的过滤器出现在 uncompress 的过滤之前，所以这个源文件会在 uncompressed 之前被 uudecoded。

=head1 WRITING A SOURCE FILTER

有三种方法来写你自己的源码过滤器。你可以把它写在 C 语言中，也可以使用外部程序作为一个过滤器或写在 Perl 中做过滤器。我不会对前两个做很多的细节讲解。在Perl编写过滤器是最方便的，所以我会投入最从的空间给它。

=head1 WRITING A SOURCE FILTER IN C

三个可用的技术中的第一种实现是用 C 写一个过滤器，由外部模块直接与 Perl 内部提供的源码过滤器的 HOOK 点创建接口。

这种技术的优点是, 你对你的过滤器的实现和工作有完全的控制权。很大缺点是增加了复杂性，需要写一个过滤器 - 不仅仅是你需要了解的源代码过滤器的 HOOK 点，你还需要不错的有关 Perl 的知识。值得这么麻烦的为数不多的理由是编写源代码扰码时用。这个 C<decrypt> 的过滤器(在 Perl 的解析器之前解读源代码)包含在那个源码过滤的发行的例子中有个 C 的源码过滤器(看有关 Decryption 的过滤器，下面的)

=over 5

=item B<Decryption Filters>

所有解密的过滤器的工作的原则是 "通过隐藏来达到安全"。不管你编写了多好的 decryption 过滤器和你有多强的加密算法，只要有足够的决心的人还是可以找回原来的源代码。原因很简单 - 一旦解密的过滤器解密源返回到其原始形式, 它的片段将被存储在计算机的内存中，如 Perl 的解析器中。源码可能只能只是很短的一段时间内在内存中，但是人们可以通过调试器，相关的技能, 超级的耐心，最终可以重建你的程序。

这也就是讲，使用这些步骤只是使 cracker 的工具变得更加难。用 C 写自己的 decryption 过滤器和静态的链接到解码模块到 Perl 和二进程文件上。只是提高了难度。可以看 I<decrypt.pm>  在你的源代码的过滤器的发布包中。

=back

=head1 CREATING A SOURCE FILTER AS A SEPARATE EXECUTABLE

替代 C 的过滤器的方式，你可以使用你所选择的语言创建一个单独的可执行文件。从标准输入读取的单个的可执行文件，读入时不需要做任何加工和将过滤后的数据写入到标准输出. C<Filter::cpp> 是一个单独的可执行的源码过滤器的一个例子 - 可执行文件是用 C 预处理器捆绑到你的 C 编译器。

源码过滤器分布包括两个模块的简化此项任务：C<Filter::exec> 和 C<Filter::sh>。 两者都允许你执行任何外部的可执行文件.两者都使用 coprocess 来控制数据的流进和外部可执行程序的输出.

The source filter distribution includes two modules that simplify this task: C<Filter::exec> and C<Filter::sh>. Both allow you to run any external executable. Both use a coprocess to control the flow of data into and out of the external executable. (For details on coprocesses, see Stephens, W.R., "Advanced Programming in the UNIX Environment." Addison-Wesley, ISBN 0-210-56317-7, pages 441-445.) The difference between them is that C<Filter::exec> spawns the external command directly, while C<Filter::sh> spawns a shell to execute the external command. (Unix uses the Bourne shell; NT uses the cmd shell.) Spawning a shell allows you to make use of the shell metacharacters and redirection facilities.

        
这里是一个示例脚本，使用 C<Filter::sh>:

    use Filter::sh 'tr XYZ PQR';
    $a = 1;
    print "XYZ a = $a\n";

你当执行该脚本的输出：

    PQR a = 1

使用一个单独的可执行文件来做源过滤器，但会产生一个小的性能损失。例如，如果你执行上面的小例子，将创建一个单独的子进程来运行 Unix 下的 C<tr> 命令。每个单独的源码过滤器都需要自己的子进程。如果创建子进程开销在你的系统上代价很高，你可能需要考虑其它的创建源码过滤的方式.

=head1 WRITING A SOURCE FILTER IN PERL

最简单的和最便携用于创建您自己的源码过滤器的方式是完全使用 Perl 来写.为了区分前面的两种技术，我称之为一个 Perl 源码过滤器。

为了帮助了解如何编写一个Perl的源代码过滤器，我们需要例子学习。下面是一个完整的源代码过滤器，执行 ROT13 译码.(Rot13 是一种非常简单的加密解密，A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。)


   package Rot13;

   use Filter::Util::Call;

   sub import {
      my ($type) = @_;
      my ($ref) = [];
      filter_add(bless $ref);
   }

   sub filter {
      my ($self) = @_;
      my ($status);

      tr/n-za-mN-ZA-M/a-zA-Z/
         if ($status = filter_read()) > 0;
      $status;
   }

   1;

上面的整个Perl 源代码过滤器是由 Perl 类实现的。

首先，我们 use C<Filter::Util::Call> 这个模块，会导出一些 filter 的名字空间的函数。这个 filter 主要使用二个函数 C<filter_add()> 和  C<filter_read()>.

接下来，我们使用 C<import> 函数导出的过滤器对象来关联相关的源码流。如果你的 Perl 不是很好，你需要知道每次 use 声明来包含模块的时候 C<import> 的会自动调用。这使得 C<import> 是个创建和安装这个过滤器对象的好理想的地方.

在这个例子中的过滤器，就象任何其它的 Perl 对象中的 blessed C<$ref> 是一样。我们例子中使用的是匿名数组，这并不是强行要求。因为这个例子中并不需要在任何上下文中存储什么信息。我们使用标量和哈希也是一样，接下来的例子会演示怎么样在上下文存数据.

过滤器对象和源码流的关联是通过 C<filter_add()> 的功能。这需要过滤器对象使用 C<$ref> 做参数和安装这个源码流。

最后，这些代码是实际的过滤代码。对于 Perl 源码过滤这种类型，全部的过滤方法都会调用 C<filter()>. 每次来行源码处理都要调用 Perl 解析器. C<filter_read()> 的功能来读每行的源码流。

Finally, there is the code that actually does the filtering. For this type of Perl source filter, all the filtering is done in a method called C<filter()>. (It is also possible to write a Perl source filter using a closure. See the C<Filter::Util::Call> manual page for more details.) It's called every time the Perl parser needs another line of source to process. The C<filter()> method, in turn, reads lines from the source stream using the C<filter_read()> function.

如果有一行可用的源码流到达， C<filter_read()> 会检查当大于零时会返回 status 的值并给行后面的东西追加到 C<$_>. status 的值为 0 表示文件结束，小于零表示出错了。这个 filter 函数的功能就是以相同的方式来预期返回 status，并给过滤后的行写到 C<$_> 的源码流中。对 C<$_> 进行操作在 Perl 的源代码过滤器中占大多数，这样比较简洁。

If a line was available from the source stream, C<filter_read()> returns a status value greater than zero and appends the line to C<$_>.  A status value of zero indicates end-of-file, less than zero means an error. The filter function itself is expected to return its status in the same way, and put the filtered line it wants written to the source stream in C<$_>. The use of C<$_> accounts for the brevity of most Perl source filters.

为了让使用 rot13 过滤器能使用，我们需要用同样的方法对源文件进行编码。下面的脚本 C<mkrot13> 用于实现这个.

    die "usage mkrot13 filename\n" unless @ARGV;
    my $in = $ARGV[0];
    my $out = "$in.tmp";
    open(IN, "<$in") or die "Cannot open file $in: $!\n";
    open(OUT, ">$out") or die "Cannot open file $out: $!\n";

    print OUT "use Rot13;\n";
    while (<IN>) {
       tr/a-zA-Z/n-za-mN-ZA-M/;
       print OUT;
    }

    close IN;
    close OUT;
    unlink $in;
    rename $out, $in;

如果我们下面这个使用 C<mkrot13> 加密:

    print " hello fred \n";

会得到这样的结果:

    use Rot13;
    cevag "uryyb serq\a";

运行这个程序，使用你自己写的过滤器:

    hello fred

=head1 USING CONTEXT: THE DEBUG FILTER

The rot13 example was a trivial example. Here's another demonstration
that shows off a few more features.

Say you wanted to include a lot of debugging code in your Perl script
during development, but you didn't want it available in the released
product. Source filters offer a solution. In order to keep the example
simple, let's say you wanted the debugging output to be controlled by
an environment variable, C<DEBUG>. Debugging code is enabled if the
variable exists, otherwise it is disabled.

Two special marker lines will bracket debugging code, like this:

    ## DEBUG_BEGIN
    if ($year > 1999) {
       warn "Debug: millennium bug in year $year\n";
    }
    ## DEBUG_END

The filter ensures that Perl parses the code between the <DEBUG_BEGIN>
and C<DEBUG_END> markers only when the C<DEBUG> environment variable
exists. That means that when C<DEBUG> does exist, the code above
should be passed through the filter unchanged. The marker lines can
also be passed through as-is, because the Perl parser will see them as
comment lines. When C<DEBUG> isn't set, we need a way to disable the
debug code. A simple way to achieve that is to convert the lines
between the two markers into comments:

    ## DEBUG_BEGIN
    #if ($year > 1999) {
    #     warn "Debug: millennium bug in year $year\n";
    #}
    ## DEBUG_END

Here is the complete Debug filter:

    package Debug;

    use strict;
    use warnings;
    use Filter::Util::Call;

    use constant TRUE => 1;
    use constant FALSE => 0;

    sub import {
       my ($type) = @_;
       my (%context) = (
         Enabled => defined $ENV{DEBUG},
         InTraceBlock => FALSE,
         Filename => (caller)[1],
         LineNo => 0,
         LastBegin => 0,
       );
       filter_add(bless \%context);
    }

    sub Die {
       my ($self) = shift;
       my ($message) = shift;
       my ($line_no) = shift || $self->{LastBegin};
       die "$message at $self->{Filename} line $line_no.\n"
    }

    sub filter {
       my ($self) = @_;
       my ($status);
       $status = filter_read();
       ++ $self->{LineNo};

       # deal with EOF/error first
       if ($status <= 0) {
           $self->Die("DEBUG_BEGIN has no DEBUG_END")
               if $self->{InTraceBlock};
           return $status;
       }

       if ($self->{InTraceBlock}) {
          if (/^\s*##\s*DEBUG_BEGIN/ ) {
              $self->Die("Nested DEBUG_BEGIN", $self->{LineNo})
          } elsif (/^\s*##\s*DEBUG_END/) {
              $self->{InTraceBlock} = FALSE;
          }

          # comment out the debug lines when the filter is disabled
          s/^/#/ if ! $self->{Enabled};
       } elsif ( /^\s*##\s*DEBUG_BEGIN/ ) {
          $self->{InTraceBlock} = TRUE;
          $self->{LastBegin} = $self->{LineNo};
       } elsif ( /^\s*##\s*DEBUG_END/ ) {
          $self->Die("DEBUG_END has no DEBUG_BEGIN", $self->{LineNo});
       }
       return $status;
    }

    1;

The big difference between this filter and the previous example is the
use of context data in the filter object. The filter object is based on
a hash reference, and is used to keep various pieces of context
information between calls to the filter function. All but two of the
hash fields are used for error reporting. The first of those two,
Enabled, is used by the filter to determine whether the debugging code
should be given to the Perl parser. The second, InTraceBlock, is true
when the filter has encountered a C<DEBUG_BEGIN> line, but has not yet
encountered the following C<DEBUG_END> line.

If you ignore all the error checking that most of the code does, the
essence of the filter is as follows:

    sub filter {
       my ($self) = @_;
       my ($status);
       $status = filter_read();

       # deal with EOF/error first
       return $status if $status <= 0;
       if ($self->{InTraceBlock}) {
          if (/^\s*##\s*DEBUG_END/) {
             $self->{InTraceBlock} = FALSE
          }

          # comment out debug lines when the filter is disabled
          s/^/#/ if ! $self->{Enabled};
       } elsif ( /^\s*##\s*DEBUG_BEGIN/ ) {
          $self->{InTraceBlock} = TRUE;
       }
       return $status;
    }

Be warned: just as the C-preprocessor doesn't know C, the Debug filter
doesn't know Perl. It can be fooled quite easily:

    print <<EOM;
    ##DEBUG_BEGIN
    EOM

Such things aside, you can see that a lot can be achieved with a modest
amount of code.

=head1 CONCLUSION

You now have better understanding of what a source filter is, and you
might even have a possible use for them. If you feel like playing with
source filters but need a bit of inspiration, here are some extra
features you could add to the Debug filter.

First, an easy one. Rather than having debugging code that is
all-or-nothing, it would be much more useful to be able to control
which specific blocks of debugging code get included. Try extending the
syntax for debug blocks to allow each to be identified. The contents of
the C<DEBUG> environment variable can then be used to control which
blocks get included.

Once you can identify individual blocks, try allowing them to be
nested. That isn't difficult either.

Here is an interesting idea that doesn't involve the Debug filter.
Currently Perl subroutines have fairly limited support for formal
parameter lists. You can specify the number of parameters and their
type, but you still have to manually take them out of the C<@_> array
yourself. Write a source filter that allows you to have a named
parameter list. Such a filter would turn this:

    sub MySub ($first, $second, @rest) { ... }

into this:

    sub MySub($$@) {
       my ($first) = shift;
       my ($second) = shift;
       my (@rest) = @_;
       ...
    }

Finally, if you feel like a real challenge, have a go at writing a
full-blown Perl macro preprocessor as a source filter. Borrow the
useful features from the C preprocessor and any other macro processors
you know. The tricky bit will be choosing how much knowledge of Perl's
syntax you want your filter to have.

=head1 THINGS TO LOOK OUT FOR

=over 5

=item Some Filters Clobber the C<DATA> Handle

有些源代码过滤器使用的 C<DATA> 句柄读取调用程序。使用这些源码过滤器时，你不能依赖这个句柄，当操作它时，也不期待任何特定的行为发生。基于 Filter::Util::Call (和 Filter::Simple) 的筛选器不会改变 C <DATA>文件句柄。

=back

=head1 REQUIREMENTS

The Source Filters distribution is available on CPAN, in 

    CPAN/modules/by-module/Filter

Starting from Perl 5.8 Filter::Util::Call (the core part of the
Source Filters distribution) is part of the standard Perl distribution.
Also included is a friendlier interface called Filter::Simple, by
Damian Conway.

=head1 AUTHOR

Paul Marquess E<lt>Paul.Marquess@btinternet.comE<gt>

=head1 Copyrights

This article originally appeared in The Perl Journal #11, and is
copyright 1998 The Perl Journal. It appears courtesy of Jon Orwant and
The Perl Journal.  This document may be distributed under the same terms
as Perl itself.
