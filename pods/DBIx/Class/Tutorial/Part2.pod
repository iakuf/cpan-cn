=pod

=encoding utf-8

=head1 NAME

DBIx::Class::Tutorial::Part2 教程的第二部分

=head1 DESCRIPTION

如果你读了  L<DBIx::Class::Tutorial::Part1> ，你现在见到的是这个教程的第二个部分.

在我们讨论更多关于 ResultSet 和行，做一些时髦的有关数据处理。

=head1 GLOSSARY

=over

=item 关系 Relationship(s)

如果你没赶上这个教程的第 1 部分

关系(Relationships)的定义是指，DBIx::Class 使用 C<JOIN> 表进行 SQL 查询的内容。

你可以在 L<Result class|DBIx::Class::Tutorial::Part1/Result class> 中定义你自己的关系，即使你的数据库不知道的他们之间的关系。

要访问二端都相互有的关系，你需要定义 2 次，每个 Result 的类上面。

=item 访问函数 Accessors

访问函数是你数据对象上进行 getting 和 setting 的方法.

DBIx::Class 会在你的 Result 类上为全部的 column 列定义访问函数

事实上，在 C<has_many> 来创建关系时会创建二个问函数。

  __PACKAGE__->has_many('names', 'Breadcrumbs::Schema::Name', 'PathID');

这个中的  C<names> 访问函数会在列表上下文时返回  Row 对象的列表，标量上下文返回 L</ResultSet>。

Another accessor named C<names_rs> is added, which will always return
a ResultSet, no matter which context it is called in. This is useful
for templating with L<Template::Toolkit>.

When doing complex searches and naming fake-columns such as a
C<COUNT(*)> column, no accessor is created. This is intentional, as it
may override methods you have written yourself. Examples of this
later.

=item Unique constraints

If your database has unique indexes defined that are not the primary
key, then L<DBIx::Class::Schema::Loader> should export them into your
Result classes for you.

You can create your own, independent of the database indexes, for
DBIx::Class to use, just add a C<add_unique_constraint> call to your
Result class.

  Breadcrumbs::Schema::Path->add_unique_constraint('pathconst' => [qw/path/]);

This is the name of the constraint, followed by a list of columns that
are unique.

=back


=head1 More about ResultSets

A Hint:

Set C<DBIC_TRACE=1> in your environment, or call C<<
$schema->storage->debug(1); >> to make L<DBIx::Class> dump all the SQL
it is producing to STDERR.

=head2 Creating ResultSets

The simplest resultset just represents a query that would return an
entire table full of data.

  ## ResultSet for the Breadcrumbs::Schema::Name class
  my $name_rs = $schema->resultset('Name')

Every C<search> in scalar context also returns a resultset. I also
snuck in an ordering example here.

  ## Just the names beginning with a:
  my $anames_rs = $schema->resultset('Name')->search(
    { 'me.name' => { 'like' => 'a%' } },      ## WHERE 
    { order_by  => [ 'me.name' ] }            ## ORDER BY
  );

We can add to the query conditions of an existing resultset:

  ## Names beginning with a, in path '/support':
  my $anames_short_rs = $anames_rs->search(
    { 'path.path' => { like => '/support/%' } }, ## WHERE
    { join        => [ 'path' ] },               ## JOIN
  );

When this query runs it will produce SQL something like:

SELECT me.id, me.name FROM Name me
JOIN Path path ON path.ID = me.PathID
WHERE me.name LIKE 'a%'
AND path.path LIKE '/support/%'
ORDER BY me.name

If we already have a row object, then we can easily fetch resultsets
of data related to it, via the L</Relationships>. For example starting
at a Path object, fetching a resultset of all the related names can be
done by calling the accessor C<names>.

  ## Get Path object for '/support':
  my $support = $schema->resultset('Path')->find({ path => '/support' });

  ## Resultset of all the names for this path:
  my $supportnames_rs = $support->names;

The resultset returned from the relationship accessor contains the
query conditions for only fetching the C<Name> rows for the C<Path>
object we started out with, the SQL will look something like:

SELECT me.id, me.name FROM Name
WHERE me.PathID = 10;

=head2 从 ResultSets 的结果中读取数据 

只要查询的语句没有问题的话，任何方法的调用，都会返回 DBIx::Class 中查询结果的返回集存储在 resultset 的对象中。

正如你在 Part1 部分所能见到的，我们使用 C<find> 来取单行的数据，这只是基于主键和 unique 来取数据。

  ## Name row with PK 1:
  my $name1 = $schema->resultset('Name')->find({ id => 1 });

如果 L</Unique constraints> 有定义，我们可以使用 C<find> 来对行进行基本的查找，我们也可以在 C<find> 的时候使用 unique 的值来替换默认的 primary key 的查找方式。我们只需要设置一下，象下面的 key 指定为 unique 的值就好了。

  ## Find path '/support', use pathconst index:
  my $supppath = $schema->resultset('Path')->find(
    { path => '/support' },
    { key => 'pathconst' }
  );

从结果集中取得多行的结果集要怎么办啦，我们可以简单的给这些行对象全都转换成数组。如果你的结果很大的话，你可以使用 while 来使用少一些内存。

  ## All results in an array:
  my @anames = $anames_rs->all;

  foreach my $name (@anames)
  {
     print $name->id;
  }

下面这个就是使用 while ，这时在同一时间只从结果集中取一行数组出来，所以这样比上面的方法会少使用很多内存,因为不用给所有行都存在数组的内存中.

  ## One at a time.
  while (my $aname = $anames_rs->next)
  {
     print $name->id;
  }

有时我们只需要使用查找到的第一行的数据，我们可以使用  C<first>  来取得首行的结果。这常常用在排序过的结果后，然后来取这个的对象.

  ## First A-name:
  my $aname = $aname_rs->first;
  print $aname->id;

我们也可以从一个结果集的数据中取得所有列，而不是行。下面这是一个非常方便的方法来获取所有的查找到的 ID 。

  ## IDs of all Names beginning with A:
  my @aids = $aname_rs->get_column('id')->all;

也可以对结果集中所有的列进行 sum 的计算之类操作。

  ## Sum of all the IDs, for no useful reason:
  my $sumids = $aname_rs->get_column('id')->sum;

还可以是任意的功能，象计算所有的 name 的长度.

  ## Slightly less contrived:
  my @lengths = $aname_rs->get_column('name')->func('LENGTH');

更多的功能请看 L<DBIx::Class::ResultSetColumn>.

=head1 相关连数据 

从一个主表查找，并批出它您任何相关的行或数据。

=head2 Simple relations

你只需要调用  relationship 的访问器, 例如, C<path> 字段的关联是从 Name 表关联到 Path 表(用 Name 表中的 C<PathID> 列关联).

  ## Get Name object for 'Support' in english:
  my $support_rs = $schema->resultset('Name')->find(
    { name => 'Support',
      lang => 1,
    });

SELECT me.id, me.name FROM Name WHERE name = 'Support' AND lang = 1

  ## Get the path object for a name result:
  my $supportname = $support_rs->first;
  my $supportpath = $supportname->path;

SELECT me.id, me.path FROM Path = WHERE PathID = ?

Or use C<prefetch> to get them both in the same query. Call the
accessor on the result as above to retrieve the prefetched data.

  ## Get Name for Support and its Path:
  my $support_rs = $schema->resultset('Name')->search(
   { name => 'Support',
     lang => 1,
   }, 
   { prefetch => [ 'path' ],          ## JOIN/SELECT
   });

  my $supportpath = $support_rs->first->path;

SELECT me.id, me.name, path.id, path.path FROM Name me 
JOIN Path path ON ( path.id = me.PathID )

=head2 Advanced joins

The C<join> and C<prefetch> attributes can also be used to join across
more than one level of related tables.

To join across multiple relationships from the same table, supply an
array of relation names to the attribute.

  ## Prefetch both Path and Lang data from Name:
  my $support_rs = $schema->resultset('Name')->search(
   { name => 'Support',
     lang => 1,
   }, 
   { prefetch => [ 'path', lang' ],          ## JOIN/SELECT
   });
  

To create a join that drills down into relations of related tables,
use a hashref.

  ## Fetch all names for Path '/support', plus the language object of
  ## each Name.
  my $path_rs = $schema->resultset('Path')->search(
    { path => '/support' },
    { prefetch => { names => 'lang' } }
  );

Be aware that this cannot prefetch to multiple has_many relationships
on the same level. The data fetching code cannot untangle the result
into objects.

=head2 Restrict search based on related data

We can just use the related tables to join to without actually
retrieving their data, for that we use the search attribute C<join>.

  ## Find all names for path '/support':
  my $supportnames = $schema->resultset('Name')->search(
    { 'path.path' => '/support' },        ## WHERE
    { join        => [ 'path' ] }         ## JOIN
  );

In the SQL produced, the names of the relations are used as aliases
for the related tables. Thus you can use constructs like C<path.path>
in your search condition to refer to a column on the related table.

The default alias for the main table in the query is C<me>.

=head2 Fetch extra values from related data

Instead of prefetching an entire related object, we can just add a
needed column to our query.

  ## Get Name for Support and its Path:
  my $support_rs = $schema->resultset('Name')->search(
   { name => 'Support',
     lang => 1,
   }, 
   {  '+select'  => [ 'path.path ' ],
      '+as'      => [ 'path' ],
      join       => [ 'path' ],
   });

SELECT me.id, me.path, path.path FROM Path me
LEFT JOIN Name names ON ( names.PathID = me.id )

The C<Result> of this is an object of class
C<Breadcrumbs::Schema::Path>, but it will have an extra data item,
called C<path>. Since this is not a predefined column in the Path
result class, it will not have an accessor. We can retrieve it's
contents using C<get_column>.

  my $path = $support_rs->first->get_column('path');

The C<+select> and C<+as> search attributes are used to include extra
columns or expressions in the query. The names supplied for these
using C<+as> are just for DBIx::Class' benefit, no C<AS> is added to
the query.

=head2 Aggregate functions

We can also make up data using aggregate functions, for example, how
many C<Name> entries does each C<Path> row have?

  ## Count names per path:
  my $namecounts_rs = $schema->resultset('Path')->search(
    { },
    { '+select'   => [ { count => '*' } ],
      '+as'       => [ 'namecount' ],
      'join'      => [ 'names' ],
      'group_by'  => [ 'me.id', 'me.path' ],
    }
  );

SELECT me.id, me.path, COUNT( * ) FROM Path me
LEFT JOIN Name names ON ( names.PathID = me.id )
GROUP BY me.id, me.path

C<group_by> is another search attribute that adds the obvious clause
to the SQL query. To get a count of names per path, we must add a
grouping to force a count per group entry.

  ## Output results:
  while (my $result = $namecounts_rs->next) {
    print "Path ", $result->path, " has ", 
      $result->get_column('namecount'), " names.\n";
    
  }

=head1 CONCLUSIONS

Now you should understand:

=over

=item *

How to create a resultset containing one or many rows from one or many
related tables.

=item *

How to retrieve the data from a resultset for both the main table and
related tables.

=item *

How to use aggregate functions in a search or on an entire row.

=back

=head1 EXERCISES

=head1 WHERE TO GO NEXT

L<Part 3 of the tutorial|DBIx::Class::Tutorial::Part3>

L<More about searching|DBIx::Class::ResultSet/search>

L<Search attributes|DBIx::Class::ResultSet/ATTRIBUTES>

L<Column objects|DBIx::Class::ResultSetColumn>

L<Search query format|SQL::Abstract>

=head1 AUTHOR

Jess Robinson <castaway@desert-island.me.uk>
